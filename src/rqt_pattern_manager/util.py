#!/usr/bin/env python

# Copyright 2019 Danish Technological Institute (DTI)

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Mads Vainoe Baatrup

import os
import rospkg
import rospy
import geometry_msgs.msg as gm_msg
import pattern_manager.msg as pm_msg
import string

from PyQt5.uic import loadUi
from PyQt5.QtCore import Qt, QVariant, QDataStream


def load_ui(file_, widget):
    """
    This function loads the requested .ui file

    :param file_: The filename to be loaded
    :type file_: str
    :param widget: The widget to hold the widget generated by the .ui file
    :type widget: QWidget
    """

    rp = rospkg.RosPack()
    ui_file = os.path.join(rp.get_path('rqt_pattern_manager'), 'resource', file_)
    loadUi(ui_file, widget)


def tree_from_nested_lists(lst, nodes):
    """
    This function unpacks a list of lists and generates a dictionary from the data

    :param lst: The list of lists
    :type lst: list
    :param nodes: a dictionary of the names and parent names of the nodes in the list of lists
    :type nodes: dict
    :return: The generated dictionary tree
    :rtype: dict
    """

    tree = {}
    for i in lst:
        name = i.name
        par_name = i.parent_name
        node = nodes[name]

        if name == par_name:
            tree[name] = node
        else:
            parent = nodes[par_name]
            parent[name] = node

    return tree


def find_item_child_by_id(parent, id_):
    """
    This function retrieves a specific child item from a supplied ID

    :param parent: The parent item
    :type parent: QItem
    :param id_: The item ID
    :type id_: int
    :return: QItem if match found, otherwise `None`
    :rtype: QItem
    """

    for i in range(0, parent.rowCount()):
        cur_child = parent.child(i)

        if cur_child and cur_child.data()['id'] == id_:
            return cur_child

    return None


def list_to_vector3(list_):
    """
    This function creates a Vector3 object from a position list

    :param list_: A list of x, y, z attributes
    :type list_: list
    :return: A Vector3 object
    :rtype: Vector3
    """

    return gm_msg.Vector3(x=list_[0], y=list_[1], z=list_[2])


def list_to_quaternion(list_):
    """
    This function creates a Quaternion object from a orientation list

    :param list_: A list of x, y, z, w attributes
    :type list_: list
    :return: A Quaterion object
    :rtype: Quaternion
    """

    return gm_msg.Quaternion(x=list_[0], y=list_[1], z=list_[2], w=list_[3])


def list_string_to_list(str_):
    """
    This function returns a list of strings from a list string

    :param str_: The list string
    :type str_: str
    :return: A list of strings
    :rtype: list
    """

    str_point = str_.translate(string.maketrans('', '', ), "[] ")

    return str_point.split(',')


def make_pattern_params_msg(name, id_, translation, rotation, ref_frame=None):
    """
    This function creates a Params object from the supplied parameters

    :param name: The name argument to be assigned the name attribute of the Params object
    :type name: str
    :param id_: The id argument to be assigned the name id of the Params object
    :type id_: int
    :param translation: The translation argument to be assigned the translation attribute of the Params object
    :type translation: list
    :param rotation: The rotation argument to be assigned the rotation attribute of the Params object
    :type rotation: list
    :param ref_frame: The reference frame argument to be assigned the ref_frame attribute of the Params object
    :type ref_frame: str
    :return: A Params object
    :rtype: Params
    """

    params = pm_msg.Params()
    params.name = name
    params.parent_id = id_
    params.translation = list_to_vector3(translation)
    params.rotation = list_to_quaternion(rotation)

    if ref_frame:
        params.ref_frame = ref_frame

    return params


def get_current_selection(view):
    """
    This function retrieves the currently selected item from a supplied view

    :param view: The view to retrieve the item from
    :type view: QAbstractItemView
    :return: The selected item
    :rtype: QItem
    """

    index = view.selectionModel().currentIndex()
    item = view.model().itemFromIndex(index)

    return item


def get_child_ids(parent):
    """
    This function retrieves all IDs of an items children

    :param parent: The parent item
    :return: A list of IDs
    :rtype: list
    """

    ids = []
    for i in range(parent.rowCount()):
        child = parent.child(i)
        id_ = child.data()['id']

        rospy.logwarn(child.text())

        ids.append(id_)

    return ids


def decode_mime_data(bytearray_):

    data = []
    item = {}

    ds = QDataStream(bytearray_)
    while not ds.atEnd():

        row = ds.readInt32()
        column = ds.readInt32()

        map_items = ds.readInt32()
        for i in range(map_items):
            key = ds.readInt32()

            value = QVariant()
            ds >> value
            item[Qt.ItemDataRole(key)] = value

        data.append(item)

    return data
